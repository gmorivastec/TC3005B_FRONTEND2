{"version":3,"sources":["classes/Perrito.tsx","classes/CicloDeVida.tsx","App.tsx"],"names":["Dinosaurio","Text","Component","ComponenteFuncional","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","CicloDeVida","props","console","log","state","count","name","request","a","async","fetch","respuesta","json","this","setState","nombre","apellido","View","edad","Button","title","onPress","nextProp","nextState","prevProp","prevState","error","info","App","useState","displayChildren","setDisplayChildren","cuentita","setCuentita","style","text","StatusBar"],"mappings":"utBAcqBA,E,0HAKjB,WAEI,OACI,cAACC,EAAA,EAAD,+C,GAR4BC,aAajC,SAASC,IAEZ,OACI,cAACF,EAAA,EAAD,+CAID,IAAMG,EAASC,IAAWC,OAAO,CACpCC,UAAW,CACTC,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,Y,mbChCDC,E,gCAqBjB,WAAYC,GAAY,IAAD,qBAEnB,cAAMA,GAENC,QAAQC,IAAI,gBAQZ,EAAKC,MAAQ,CAACC,MAAO,EAAGC,KAAM,gBAC9B,EAAKC,UAbc,E,mCAnBvB,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAE0BE,MAAM,4FAFhC,cAEQC,EAFR,kBAAAH,EAAA,MAGqBG,EAAUC,QAH/B,OAGQA,EAHR,OAKIC,KAAKC,UAAS,SAACV,GAEX,OADAF,QAAQC,IAAI,8BACL,CAACG,KAAMM,EAAK,GAAGG,WAP9B,8D,oBAsCA,WAAS,IAAD,OAEJ,OADAb,QAAQC,IAAI,UAAYU,KAAKZ,MAAMe,UAE/B,eAACC,EAAA,EAAD,WACI,eAAC5B,EAAA,EAAD,mDAA4CwB,KAAKT,MAAME,KAAvD,IAA8DO,KAAKZ,MAAMiB,KAAzE,cAAuFL,KAAKT,MAAMC,SAClG,cAACc,EAAA,EAAD,CACIC,MAAM,iBACNC,QAAS,WACL,EAAKP,UAAS,SAACV,GACX,MAAO,CAACE,KAAM,sBAI1B,cAACa,EAAA,EAAD,CACIC,MAAM,iBACNC,QAAS,WACL,EAAKP,UAAS,SAACV,EAAOH,GAClB,MAAO,CAACI,MAAOD,EAAMC,MAAQ,c,+BASrD,WACIH,QAAQC,IAAI,6C,mCAQhB,SAAsBmB,EAAeC,GAQjC,OAJArB,QAAQC,IAAI,4CAA8CU,KAAKT,MAAMC,MAAQ,QAAUkB,EAAUlB,OACjGH,QAAQC,IAAI,4CAA8CU,KAAKZ,MAAMiB,KAAO,QAAUI,EAASJ,OAGxF,I,gCAMX,SAAmBM,EAAeC,GAC9BvB,QAAQC,IAAI,iCAAmCU,KAAKT,MAAMC,MAAQ,QAAUoB,EAAUpB,S,kCAK1F,WAGIH,QAAQC,IAAI,qC,+BAMhB,SAAkBuB,EAAWC,GAEzBzB,QAAQC,IAAI,+B,GA1GqBb,aCD1B,SAASsC,IAEtB,IAOA,EAA8CC,oBAAS,GAAvD,WAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgCF,mBAAS,GAAzC,WAAOG,EAAP,KAAiBC,EAAjB,KAEA,OACE,eAAChB,EAAA,EAAD,CAAMiB,MAAO1C,EAAOG,UAApB,UACE,cAACN,EAAA,EAAD,4DACA,cAAC,EAAD,IACA,cAACE,EAAD,IAEEuC,GACA,cAAC,EAAD,CAAad,SAAS,WAAWE,KAAMc,IAEzC,cAACb,EAAA,EAAD,CACIC,MAAM,oBACNC,QAAS,WACPU,GAAoBD,MAG1B,cAACX,EAAA,EAAD,CACIC,MAAM,oBACNC,QAAS,WACPY,EAAYD,EAAW,MAI7B,cAACb,EAAA,EAAD,CACIC,MAAM,iCACNC,QAAS,YAlCD,qBAAAb,EAAAC,OAAA,kEAAAD,EAAA,MAEQE,MAAM,2BAFd,cAEVC,EAFU,kBAAAH,EAAA,MAGGG,EAAUwB,QAHb,OAGVA,EAHU,OAKdjC,QAAQC,IAAIgC,GALE,4DAmCN5B,MAGN,cAAC6B,EAAA,EAAD,CAAWF,MAAM,c","file":"static/js/app.2aa0f687.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { Text, StyleSheet } from 'react-native';\n// files == modules\n// pueden contener:\n// - clases\n// - functions \n// - constantes\n// - etc\n\n// a diferencia de otros lenguajes un módulo puede o no tener clases\n\n// declarando un componente clase\n// si quieremos que este elemento sea accesible desde afuera \n// lo exportamos\nexport default class Dinosaurio extends Component {\n    \n    // atributos si tiene clase \n\n    // forzoso al menos 1 método\n    render() {\n\n        return (\n            <Text>HOLA SOY UN COMPONENTE CLASE</Text>\n        );\n    }\n}\n\nexport function ComponenteFuncional() {\n\n    return(\n        <Text>HOLA SOY UN COMPONENTE FUNCIONAL</Text>\n    );\n}\n\nexport const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n","import React, { Component } from 'react';\nimport { View, Button, Text } from 'react-native';\n\n// qué es el ciclo de vida\n// - métodos que se definen como parte de un componente\n// - se ejecutan de manera \"automatica\" durante la vida del componente\n\nexport default class CicloDeVida extends Component {\n\n    async request() {\n\n        var respuesta = await fetch(\"https://raw.githubusercontent.com/gmorivastec/TC3005B_FRONTEND_APR4/master/gatitos.json\");\n        var json = await respuesta.json();\n        \n        this.setState((state)=>{\n            console.log(\"DETONANDO CAMBIO DE ESTADO\");    \n            return {name: json[0].nombre};\n        });\n        \n    }\n\n    // 3 momentos grandes en la vida de un componente\n    // - montaje (mounting)\n    // - actualización (update)\n    // - desmontaje (unmounting)\n\n    // 1ERO DE TODOS - CONSTRUCTOR\n    // aquí recibimos las props\n    constructor(props: any){\n        // lo primero que hacemos es invocar al superconstructor\n        super(props);\n\n        console.log(\"CONSTRUCTOR!\");\n        // lo que quieras va aquí!\n\n        // state \n        // ¿podríamos utilizar variables de instancia?\n        // ¿por qué usar state entonces?\n        // ya existe el atributo this.state\n        // recomendaciones - sólo escribirlo directament en el constructor\n        this.state = {count: 0, name: \"componentito\"};\n        this.request();\n        // posteriormente siempre usaremos setState\n        \n    }\n\n    // esto corre después una vez PERO también vive en update\n    render(){\n        console.log(\"RENDER!\" + this.props.apellido);\n        return(\n            <View>\n                <Text>HOLA SOY EL CICLO DE VIDA Y ME LLAMO {this.state.name} {this.props.edad} ADEMÁS {this.state.count}</Text>\n                <Button \n                    title=\"CAMBIAR NOMBRE\"\n                    onPress={() => {\n                        this.setState((state) => {\n                            return {name: \"componentote\"};\n                        });\n                    }}\n                />\n                <Button \n                    title=\"CAMBIAR CUENTA\"\n                    onPress={() => {\n                        this.setState((state, props) => {\n                            return {count: state.count + 1};\n                        });\n                    }}\n                />\n            </View>\n        );\n    }\n\n    // una vez que se hizo render y todo fue exitoso\n    componentDidMount() {\n        console.log(\"SE MONTÓ EL COMPONENTE EXITOSAMENTE!\");\n    }\n\n    // 2DO MOMENTO - UPDATE \n    // se detona cuando hay cambio de estado / propiedades\n\n    // 1ero - verificamos si hay cambio\n    // PODEMOS sobreescribir el método filtro\n    shouldComponentUpdate(nextProp: any, nextState: any){\n\n        // recibimos - nuevos props y nuevos states\n        // podemos comparar vs. anterior\n        console.log(\"SHOULD COMPONENT UPDATE INVOCADO (state) \" + this.state.count + \" VS. \" + nextState.count);\n        console.log(\"SHOULD COMPONENT UPDATE INVOCADO (props) \" + this.props.edad + \" VS. \" + nextProp.edad);\n        \n        // siempre regresa true por default\n        return true;\n    }\n\n    // render también viene como parte del update \n\n    // último método invocado una vez que se hizo el render \n    componentDidUpdate(prevProp: any, prevState: any){\n        console.log(\"COMPONENT DID UPDATE INVOCADO \" + this.state.count + \" VS. \" + prevState.count);\n    }\n\n    // 3ER MOMENTO\n    // desmontaje - quitamos componente de vista\n    componentWillUnmount() {\n\n        // aquí limpiamos servicios / subscripciones que estén activos\n        console.log(\"COMPONENT WILL UNMOUNT INVOCADO\");\n    }\n\n    // EXTRA!\n    // si el componente se topó con excepción\n    // este método se corre\n    componentDidCatch(error:any, info:any){\n\n        console.log(\"ESTO PASA SI HUBO ERROR\");\n    }\n}","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport Dino, { ComponenteFuncional, styles } from './classes/Perrito';\nimport CicloDeVida from './classes/CicloDeVida';\nimport { useState } from 'react';\n\nexport default function App() {\n\n  const request = async() => {\n\n    var respuesta = await fetch(\"http://127.0.0.1:5000/\");\n    var text = await respuesta.text();\n    \n    console.log(text);\n  }\n  const [displayChildren, setDisplayChildren] = useState(true);\n  const [cuentita, setCuentita] = useState(0);\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.tsx to start working on your app!</Text>\n      <Dino></Dino>\n      <ComponenteFuncional></ComponenteFuncional>\n      {\n        displayChildren &&\n        <CicloDeVida apellido=\"Martinez\" edad={cuentita}></CicloDeVida>\n      }\n      <Button \n          title=\"OCULTAR / MOSTRAR\"\n          onPress={() => {\n            setDisplayChildren(!displayChildren);\n          }}\n      />\n      <Button \n          title=\"ACTUALIZAR CUENTA\"\n          onPress={() => {\n            setCuentita(cuentita + 1);\n          }}\n      />\n\n      <Button \n          title=\"HACER REQUEST PARA PROBAR CORS\"\n          onPress={() => {\n            request();\n          }}\n      />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n\n"],"sourceRoot":""}